pages:
  image: node
  before_script:
    - pwd
  script:
    - cd public-website
    - npm --version
    - date
    - yarn install
    - date
    - yarn run ng build --aot=true --prod --build-optimizer --verbose --progress=true --delete-output-path --extract-licenses --subresource-integrity --stats-json --output-path=public
    - date
    - du -sh public/
    - mv public ../public
    - ls -a
    - pwd
    - cd ..
    - ls -a
    - pwd
  artifacts:
    paths:
      - public

test:mypages:
  image: trion/ng-cli-karma
  script:
    - cd public-website
    - pwd 
    - ls -a
    - yarn install
    - yarn run ng test --progress false --watch=false
    - yarn run ng e2e

build:dotnetcore:
  image: microsoft/dotnet:latest
  script:
    - pwd
    - cd Windows
    - cd ClassLibrary1
    - pwd
    - dotnet --version
    - dotnet restore --verbosity detailed
    - dotnet build --verbosity detailed

test:dotnetcore:
   image: microsoft/dotnet:latest
   script:
     - pwd
     - cd Windows
     - cd XUnitTestProject1
     - dotnet restore --verbosity detailed
     - dotnet test --verbosity detailed

test:databases:
  image: postgres
  services:
    - postgres
  variables:
    # Configure postgres service (https://hub.docker.com/_/postgres/)
    POSTGRES_DB: custom_db
    POSTGRES_USER: custom_user
    POSTGRES_PASSWORD: custom_pass
    image: postgres
  script:
    - cd public-databases
    - pwd
    - ls -a 
    # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f create_tables.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f insert_data.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f query_data.sql

test:rawlinsdb:
  image: postgres
  services:
    - postgres
  variables:
    # Configure postgres service (https://hub.docker.com/_/postgres/)
    POSTGRES_DB: rawlins
    POSTGRES_USER: rawlins
    POSTGRES_PASSWORD: rawlins
    image: postgres
  script:
    - cd experimental/python/rawlins/db
    - pwd
    - ls -a 
    # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f create_tables.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f insert_data.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f query_data.sql

test:rawlinsunittest:
  image: python:stretch
  services:
    - postgres
  variables:
    # Configure postgres service (https://hub.docker.com/_/postgres/)
    POSTGRES_DB: rawlins
    POSTGRES_USER: rawlins
    POSTGRES_PASSWORD: rawlins
    image: postgres
  script:
    - cd experimental/python/rawlins
    - pwd
    - ls -a 
    - pip install --upgrade pip setuptools
    - pip install --user pipenv
    - export PATH="$HOME/.local/bin:$PATH"
    - pipenv install
    - pipenv run python -m unittest discover

test:hobackunittest:
  image: python:stretch
  script:
    - cd experimental/python/hoback
    - pwd
    - ls -a
    - pip install --upgrade pip setuptools
    - pip install --user pipenv
    - export PATH="$HOME/.local/bin:$PATH"
    - pipenv install
    - pipenv run pytest

test:goshenunittest:
  image: python:stretch
  script:
    - cd experimental/python/goshen
    - pwd
    - ls -a
    - pip install --upgrade pip setuptools
    - pip install --user pipenv
    - export PATH="$HOME/.local/bin:$PATH"
    - pipenv install
    - pipenv run python -m pytest

test:buford:
  image: python:stretch
  script:
    - cd experimental/python/buford
    - pwd
    - ls -a
    - pip install --upgrade pip setuptools
    - pip install --user pipenv
    - export PATH="$HOME/.local/bin:$PATH"
    - pipenv install
    - pipenv run pytest
    - eval $(ssh-agent -s)
    - echo "$MYNEPAL_SSH_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - git config user.name "Gitlab Agent"
    - git config user.email "agent@gitlab.com"
    - git remote set-url origin ssh://kus@mynepal.duckdns.org:/home/kus/Documents/wyoming_remote.git
    # - git push origin --all


test:buforddb:
  image: postgres
  services:
    - postgres
  variables:
    # Configure postgres service (https://hub.docker.com/_/postgres/)
    POSTGRES_DB: buford
    POSTGRES_USER: buford
    POSTGRES_PASSWORD: buford
    image: postgres
  script:
    - cd experimental/python/buford/db
    - pwd
    - ls -a 
    # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f create_tables.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f insert_data.sql
    - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f query_data.sql
  
test:micronesia:
  image: golang:latest
  script:
  - cd experimental/golang/micronesia
  - pwd 
  - go test ./... -v

test:rusthello:
  image: rust:latest
  script:
  - cd experimental/rust/hello
  - pwd 
  - rustc main.rs
  - ./main

test:barebearphppgsql:
  image: fedora:latest
  services:
    - postgres
  variables:
    POSTGRES_DB: barebears
    POSTGRES_USER: barebears
    POSTGRES_PASSWORD: barebears
    image: postgres
  script:
  - dnf upgrade --refresh -y
  - dnf install php-cli composer php-xml php-mbstring php-pdo php-pgsql php-mysqlnd postgresql mariadb -y
  - export PGPASSWORD=$POSTGRES_PASSWORD
  - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"
  - cd experimental/php/noframework/barebear
  - pwd 
  - composer update
  - vendor/bin/phpunit --configuration phpunit.xml --verbose --debug

test:barebearphpmysql:
  image: fedora:latest
  services:
  - mysql
  variables:
    # Configure mysql service (https://hub.docker.com/_/mysql/)
    MYSQL_DATABASE: hello_world_test
    MYSQL_ROOT_PASSWORD: mysql
  script:
  - dnf upgrade --refresh -y
  - dnf install php-cli composer php-xml php-mbstring php-pdo php-pgsql php-mysqlnd postgresql mariadb -y
  - export PGPASSWORD=$POSTGRES_PASSWORD
  - echo "SELECT 'OK';" | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE"
  - cd experimental/php/noframework/barebear
  - pwd 
  - composer update
  - vendor/bin/phpunit --configuration phpunit.xml --verbose --debug

test:barebearphpcomposer:
  image: composer:latest
  script:
  - cd experimental/php/noframework/barebear
  - pwd 
  - composer update
  - vendor/bin/phpunit --configuration phpunit.xml --verbose --debug

test:jonahtypescript:
  image: node:latest
  script:
  - cd experimental/typescript/jonah
  - yarn install
  - ./node_modules/.bin/tsc 
  - node hackerrank.js

test:experimental-dotnet-consoleapp1-webapp3-client:
  image: trion/ng-cli-karma
  script:
    - cd experimental/dotnet/ConsoleApp1/WebApplication3/ClientApp
    - pwd 
    - ls -a
    - npm install
    - ./node_modules/@angular/cli/bin/ng test --progress false --watch=false
    - ./node_modules/@angular/cli/bin/ng e2e
  only:
    changes:
    - experimental/dotnet/ConsoleApp1/WebApplication3/ClientApp/**/*

build:daegu:
  image: mcr.microsoft.com/dotnet/core/sdk:3.0
  script:
    - pwd
    - cd experimental
    - cd dotnet
    - cd Daegu
    - pwd
    - dotnet --version
    - dotnet --info
    - dotnet build --verbosity detailed

test:daegu:
   image: mcr.microsoft.com/dotnet/core/sdk:3.0
   script:
     - pwd
     - cd experimental
     - cd dotnet
     - cd Daegu
     - dotnet test --verbosity detailed

build:pyeongtaek:
  image: mcr.microsoft.com/dotnet/core/sdk:3.0
  script:
    - pwd
    - cd experimental
    - cd dotnet
    - cd pyeongtaek
    - pwd
    - dotnet --version
    - dotnet --info
    - dotnet build --verbosity detailed

test:pyeongtaek:
   image: mcr.microsoft.com/dotnet/core/sdk:3.0
   script:
     - pwd
     - cd experimental
     - cd dotnet
     - cd pyeongtaek
     - dotnet test --verbosity detailed